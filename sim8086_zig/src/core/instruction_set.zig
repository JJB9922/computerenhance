const std = @import("std");

pub const FieldLoc = struct {
    byte_index: u8,
    bit_mask: u8,
    // note endianness
    bit_start: u3 = 0,
};

pub const instruction = struct {
    // Bases
    size: u8 = 1,
    address: u16 = 0x00,
    opcode_bits: u8 = 0b00000000,
    opcode_mask: u8 = 0b00000000,
    opcode_id: opcode = opcode.nop,

    // Field locations
    d_loc: ?FieldLoc = null,
    w_loc: ?FieldLoc = null,
    s_loc: ?FieldLoc = null,
    v_loc: ?FieldLoc = null,
    z_loc: ?FieldLoc = null,
    mod_loc: ?FieldLoc = null,
    reg_loc: ?FieldLoc = null,
    rm_loc: ?FieldLoc = null,
    disp_low_loc: ?FieldLoc = null,
    disp_high_loc: ?FieldLoc = null,
    data_low_loc: ?FieldLoc = null,
    data_high_loc: ?FieldLoc = null,
    sr_loc: ?FieldLoc = null,
    arithmetic_id_loc: ?FieldLoc = null,
    ip_inc8_loc: ?FieldLoc = null,

    // Flags
    data_if_w: ?bool = false,
    data_if_sw: ?bool = false,
    w_on: ?bool = false,
    s_on: ?bool = false,
    imm_to_acc: ?bool = false,

    // I shouldn't put these here but its a quick lazy easy way to do it
    binary: []u8 = "",
    source_reg: []const u8 = "",
    destination_reg: []const u8 = "",
    source_int: u16 = 0,
    jump_addr: u16 = 0,
    is_memory: bool = false,
};

pub const instructions = [_]instruction{
    instruction{
        .opcode_id = opcode.mov,
        .opcode_bits = 0b10001000,
        .opcode_mask = 0b11111100,
        .d_loc = .{ .byte_index = 0, .bit_mask = 0b00000010, .bit_start = 1 },
        .w_loc = .{ .byte_index = 0, .bit_mask = 0b00000001, .bit_start = 0 },
        .mod_loc = .{ .byte_index = 1, .bit_mask = 0b11000000, .bit_start = 6 },
        .reg_loc = .{ .byte_index = 1, .bit_mask = 0b00111000, .bit_start = 3 },
        .rm_loc = .{ .byte_index = 1, .bit_mask = 0b00000111, .bit_start = 0 },
        .disp_low_loc = .{ .byte_index = 2, .bit_mask = 0b11111111 },
        .disp_high_loc = .{ .byte_index = 3, .bit_mask = 0b11111111 },
    },
    instruction{
        .opcode_id = opcode.mov,
        .opcode_bits = 0b11000110,
        .opcode_mask = 0b11111110,
        .w_loc = .{ .byte_index = 0, .bit_mask = 0b00000001, .bit_start = 0 },
        .mod_loc = .{ .byte_index = 1, .bit_mask = 0b11000000, .bit_start = 6 },
        .rm_loc = .{ .byte_index = 1, .bit_mask = 0b00000111, .bit_start = 0 },
        .disp_low_loc = .{ .byte_index = 2, .bit_mask = 0b11111111 },
        .disp_high_loc = .{ .byte_index = 3, .bit_mask = 0b11111111 },
        .data_low_loc = .{ .byte_index = 4, .bit_mask = 0b11111111 },
        .data_high_loc = .{ .byte_index = 5, .bit_mask = 0b11111111 },
        .data_if_w = true,
    },
    instruction{
        .opcode_id = opcode.mov,
        .opcode_bits = 0b10110000,
        .opcode_mask = 0b11110000,
        .w_loc = .{ .byte_index = 0, .bit_mask = 0b00001000, .bit_start = 3 },
        .reg_loc = .{ .byte_index = 0, .bit_mask = 0b0000111, .bit_start = 0 },
        .data_low_loc = .{ .byte_index = 1, .bit_mask = 0b11111111 },
        .data_high_loc = .{ .byte_index = 2, .bit_mask = 0b11111111 },
        .data_if_w = true,
    },
    instruction{
        .opcode_id = opcode.add,
        .opcode_bits = 0b00000000,
        .opcode_mask = 0b11111100,
        .w_loc = .{ .byte_index = 0, .bit_mask = 0b00000001, .bit_start = 0 },
        .d_loc = .{ .byte_index = 0, .bit_mask = 0b00000010, .bit_start = 1 },
        .mod_loc = .{ .byte_index = 1, .bit_mask = 0b11000000, .bit_start = 6 },
        .reg_loc = .{ .byte_index = 1, .bit_mask = 0b00111000, .bit_start = 3 },
        .rm_loc = .{ .byte_index = 1, .bit_mask = 0b00000111, .bit_start = 0 },
        .disp_low_loc = .{ .byte_index = 2, .bit_mask = 0b11111111 },
        .disp_high_loc = .{ .byte_index = 3, .bit_mask = 0b11111111 },
    },
    instruction{
        .opcode_id = opcode.arithmetic,
        .opcode_bits = 0b10000000,
        .opcode_mask = 0b11111100,
        .w_loc = .{ .byte_index = 0, .bit_mask = 0b00000001, .bit_start = 0 },
        .s_loc = .{ .byte_index = 0, .bit_mask = 0b00000010, .bit_start = 1 },
        .mod_loc = .{ .byte_index = 1, .bit_mask = 0b11000000, .bit_start = 6 },
        .rm_loc = .{ .byte_index = 1, .bit_mask = 0b00000111, .bit_start = 0 },
        .disp_low_loc = .{ .byte_index = 2, .bit_mask = 0b11111111 },
        .disp_high_loc = .{ .byte_index = 3, .bit_mask = 0b11111111 },
        .data_low_loc = .{ .byte_index = 4, .bit_mask = 0b11111111 },
        .data_high_loc = .{ .byte_index = 5, .bit_mask = 0b11111111 },
        .data_if_sw = true,
        .arithmetic_id_loc = .{ .byte_index = 1, .bit_mask = 0b00111000, .bit_start = 3 },
    },
    instruction{
        .opcode_id = opcode.add,
        .opcode_bits = 0b00000100,
        .opcode_mask = 0b11111110,
        .w_loc = .{ .byte_index = 0, .bit_mask = 0b00000001, .bit_start = 0 },
        .data_low_loc = .{ .byte_index = 1, .bit_mask = 0b11111111 },
        .data_high_loc = .{ .byte_index = 2, .bit_mask = 0b11111111 },
        .data_if_w = true,
        .imm_to_acc = true,
    },
    instruction{
        .opcode_id = opcode.sub,
        .opcode_bits = 0b00101000,
        .opcode_mask = 0b11111100,
        .w_loc = .{ .byte_index = 0, .bit_mask = 0b00000001, .bit_start = 0 },
        .d_loc = .{ .byte_index = 0, .bit_mask = 0b00000010, .bit_start = 1 },
        .mod_loc = .{ .byte_index = 1, .bit_mask = 0b11000000, .bit_start = 6 },
        .reg_loc = .{ .byte_index = 1, .bit_mask = 0b00111000, .bit_start = 3 },
        .rm_loc = .{ .byte_index = 1, .bit_mask = 0b00000111, .bit_start = 0 },
        .disp_low_loc = .{ .byte_index = 2, .bit_mask = 0b11111111 },
        .disp_high_loc = .{ .byte_index = 3, .bit_mask = 0b11111111 },
    },
    instruction{
        .opcode_id = opcode.sub,
        .opcode_bits = 0b00101100,
        .opcode_mask = 0b11111110,
        .w_loc = .{ .byte_index = 0, .bit_mask = 0b00000001, .bit_start = 0 },
        .data_low_loc = .{ .byte_index = 1, .bit_mask = 0b11111111 },
        .data_high_loc = .{ .byte_index = 2, .bit_mask = 0b11111111 },
        .data_if_w = true,
        .imm_to_acc = true,
    },
    instruction{
        .opcode_id = opcode.cmp,
        .opcode_bits = 0b00111000,
        .opcode_mask = 0b11111100,
        .w_loc = .{ .byte_index = 0, .bit_mask = 0b00000001, .bit_start = 0 },
        .d_loc = .{ .byte_index = 0, .bit_mask = 0b00000010, .bit_start = 1 },
        .mod_loc = .{ .byte_index = 1, .bit_mask = 0b11000000, .bit_start = 6 },
        .reg_loc = .{ .byte_index = 1, .bit_mask = 0b00111000, .bit_start = 3 },
        .rm_loc = .{ .byte_index = 1, .bit_mask = 0b00000111, .bit_start = 0 },
        .disp_low_loc = .{ .byte_index = 2, .bit_mask = 0b11111111 },
        .disp_high_loc = .{ .byte_index = 3, .bit_mask = 0b11111111 },
    },
    instruction{
        .opcode_id = opcode.cmp,
        .opcode_bits = 0b00111100,
        .opcode_mask = 0b11111110,
        .w_loc = .{ .byte_index = 0, .bit_mask = 0b00000001, .bit_start = 0 },
        .data_low_loc = .{ .byte_index = 1, .bit_mask = 0b11111111 },
        .data_high_loc = .{ .byte_index = 2, .bit_mask = 0b11111111 },
        .imm_to_acc = true,
        .data_if_w = true,
    },
    instruction{
        .opcode_id = opcode.jnz,
        .opcode_bits = 0b01110101,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.je,
        .opcode_bits = 0b01110100,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },

    instruction{
        .opcode_id = opcode.jl,
        .opcode_bits = 0b01111100,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jle,
        .opcode_bits = 0b01111110,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jb,
        .opcode_bits = 0b01110010,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jbe,
        .opcode_bits = 0b01110110,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jp,
        .opcode_bits = 0b01111010,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jo,
        .opcode_bits = 0b01110000,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.js,
        .opcode_bits = 0b01111000,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jne,
        .opcode_bits = 0b01110101,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jnl,
        .opcode_bits = 0b01111101,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jg,
        .opcode_bits = 0b01111111,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jnb,
        .opcode_bits = 0b01110011,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.ja,
        .opcode_bits = 0b01110111,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jnp,
        .opcode_bits = 0b01111011,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jno,
        .opcode_bits = 0b01110001,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jns,
        .opcode_bits = 0b01111001,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.loop,
        .opcode_bits = 0b11100010,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.loopz,
        .opcode_bits = 0b11100001,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.loopnz,
        .opcode_bits = 0b11100000,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
    instruction{
        .opcode_id = opcode.jcxz,
        .opcode_bits = 0b11100011,
        .opcode_mask = 0b11111111,
        .ip_inc8_loc = .{ .byte_index = 1, .bit_mask = 0b11111111, .bit_start = 0 },
    },
};

pub const opcode = enum {
    nop,
    mov,
    add,
    sub,
    cmp,
    jnz,
    je,
    jl,
    jle,
    jb,
    jbe,
    jp,
    jo,
    js,
    jne,
    jnl,
    jg,
    jnb,
    ja,
    jnp,
    jno,
    jns,
    loop,
    loopz,
    loopnz,
    jcxz,

    arithmetic,
};
